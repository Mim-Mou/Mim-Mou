import sys
import math
import random
from time import time

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def fpow(n, k, p):
    r = 1
    while k:
        if k & 1:
            r = r * n % p
        n = n * n % p
        k >>= 1
    return r

def ispr(k):
    if k <= 1:
        return False
    for i in range(2, int(math.sqrt(k)) + 1):
        if k % i == 0:
            return False
    return True

def brute(p, l):
    f = [0] * p
    res = 0
    for i in range(1, l + 1):
        f = [0] * p
        for j in range(1, p):
            f[fpow(j, i, p)] = 1
        found = False
        for j in range(1, p):
            if f[j]:
                k = (1 - j + p) % p
                if f[k]:
                    found = True
                    break
        res += found
    return res

def chemthan():
    random.seed(int(time()))
    p, l = map(int, input().split())
    assert 1 <= p <= int(1e6) and ispr(p)
    assert 1 <= l <= int(1e18)

    w = 0
    while True:
        w = random.randint(1, p - 1)
        found = False
        t = 1
        for _ in range(p - 2):
            t = t * w % p
            if t == 1:
                found = True
                break
        if not found:
            break

    f = [0] * p
    g = [0] * p

    for d in range(1, p):
        if (p - 1) % d == 0:
            t = 1
            step = fpow(w, d, p)
            found = False
            for _ in range((p - 1) // d):
                f[t] = 1
                if f[(1 - t + p) % p]:
                    found = True
                t = t * step % p
            for _ in range((p - 1) // d):
                f[t] = 0
                t = t * step % p
            g[d] = found

    res = 0
    for i in range(1, p):
        d = gcd(i, p - 1)
        if g[d] and l >= i:
            res += (l - i) // (p - 1) + 1

    print(res)

    if p <= 1000 and l <= 1000:
        assert res == brute(p, l)

if __name__ == "__main__":
    input = sys.stdin.read
    chemthan()
